#!/usr/bin/env python
# Name: pumsu (PUppet Module Satellite Uploader)
# Description: Builds Puppet modules and uploads to Red Hat Satellite
# License: GPL
# Copyright (C) 2016  Morgan Weetman <mweetman@redhat.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


from __future__ import print_function
import getopt
from glob import glob
import os
from shutil import copy
from shutil import rmtree
from signal import *
import subprocess
import tempfile
from sys import argv
from sys import exit


# handle ctrl+c instead of crashing out whereever we are
def sig_handler(sig, frame):
  exit(0)


def usage():
  print('Usage: %s OPTIONS' % argv[0])
  print('\nBuilds and uploads Puppet modules to Red Hat Satellite')
  print('\nOPTIONS:')
  print('  -d|--debug         - do not clean up temporary artifacts')
  print('  -m|--modules       - file containing a list of modules to process')
  print('  -o|--organisation  - Satellite organisation')
  print('  -p|--product       - Satellite product')
  print('  -r|--repo          - Satellite puppet module repository')
  print('  -t|--target        - target directory containing the modules')
  print(' [-h|--help]')


def main():
  debug = False
  signal(SIGINT, sig_handler)
  try:
    opts, args = getopt.gnu_getopt(argv[1:], "dm:o:p:r:t:h", ["debug", "modules", "organisation", "product", "repo", "target","help"])
  except getopt.GetoptError, err:
    print(str(err))
    usage()
    return 1

  if len(opts) == 0:
    usage()
    return 1

  for opt, arg in opts:
    if opt in ("-d", "--debug"):
      debug = True
    elif opt in ("-m", "--modules"):
      module_file = arg
    elif opt in ("-o", "--organisation"):
      org = arg
    elif opt in ("-p", "--product"):
      product = arg
    elif opt in ("-r", "--repo"):
      repo = arg
    elif opt in ("-t", "--target"):
      target = arg
    elif opt in ("-h", "--help"):
      usage()
      return 0
    else:
      print('<*> unhandled option')
      return 4

  try:
    module_file
    org
    product
    repo
    target
  except:
    print("<*> required option missing")
    usage()
    return 1

  # check we are logged in via hammer
  process = subprocess.Popen("hammer auth status | grep 'You are logged in'", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  output = process.communicate()[0]
  process.wait()
  if process.returncode != 0:
    print("<!> not logged in via hammer, please ensure ~/.hammer/cli_config.yml is correct")
    return 1

  # create temp dir to hold module tarballs
  out_dir = tempfile.mkdtemp()

  # read module list
  modules = [line.rstrip('\n') for line in open(module_file, "r")]

  os.chdir(target)

  # ensure content is readable by all, will cause issues for Satellite if not
  print("[*] resetting permissions in target directory")
  ensure_perms = subprocess.Popen("chmod -R a+r ./", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  ensure_perms.communicate()
  ensure_perms.wait()

  # build the modules
  for mod in modules:
    print("[*] building module: %s" % mod)
    os.chdir(mod)
    module_build = subprocess.Popen(["puppet", "module", "build"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    module_build.communicate()
    module_build.wait()
    copy(glob("pkg/*.tar.gz")[0], out_dir)
    if debug is False:
      rmtree("pkg/")
    os.chdir('../')

  # upload the modules
  print("[*] uploading modules")
  process = subprocess.Popen("hammer repository upload-content --name %s --path %s --product %s --organization %s" % (repo, out_dir, product, org) , shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  process.wait()

  # clean up
  if debug:
    print("[d] temp dir %s has NOT been cleaned up" % out_dir)
    print("[d] <module>/pkg direcories have NOT been cleaned up")
  else:
    print("[*] cleaning up temp dir")
    rmtree(out_dir)

  return 0

if __name__ == "__main__":
    os.umask(022)
    rc = main()
    exit(rc)

